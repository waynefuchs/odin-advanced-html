/*
NOTE: Opacity can not be used here for two reasons:
1. The button is a child of the curtain, so the button would disappear.
2. If you separate the button from the curtain, it no longer bubbles up events, 
   so button presses are no longer possible and javascript would need to be involved.

NOTE: linear-gradient() is of type `image`, so background-color does not apply.
There is no opacity property.
*/

/*
This is the backbone of this effect. There is an opacity "curtain" that sits
behind the button.
*/
.bg-curtain {
  transition: 1s background-color ease;
  background-color: var(--c2-light);
  border-radius: var(--button-radius);
}
.bg-curtain:hover {
  background-color: rgba(255, 255, 255, 0);
}

/* 
  The parent container is the container that has whatever content is
  desired to be shown behind the opacity curtain.
  */
.bg-rainbow {
  background: linear-gradient(
    90deg,
    rgba(255, 0, 0, 1) 0%,
    rgba(255, 0, 0, 1) 14%,
    rgba(255, 134, 0, 1) 14%,
    rgba(255, 134, 0, 1) 28.5%,
    rgba(247, 255, 0, 1) 28.5%,
    rgba(247, 255, 0, 1) 42.85%,
    rgba(0, 255, 18, 1) 42.85%,
    rgba(0, 255, 18, 1) 57.14%,
    rgba(0, 73, 247, 1) 57.14%,
    rgba(0, 73, 247, 1) 71.42%,
    rgba(0, 1, 103, 1) 71.42%,
    rgba(0, 1, 103, 1) 85.71%,
    rgba(134, 0, 255, 1) 85.71%,
    rgba(134, 0, 255, 1) 100%
  );
  border-radius: var(--button-radius);
}

/* 
  Finally: The button can be styled however you like, as long as "background-color"
  is set to be transparent, so the rainbow and curtain can be seen behind.
  */
button#rainbow1 {
  border-radius: var(--button-radius);
  font-size: 1rem;
  width: var(--button-width);
  height: var(--button-height);
  background-color: transparent;
  transition: 250ms font-size;
}
button#rainbow1:hover {
  font-weight: bold;
  font-size: 2rem;
  color: #fff;
  text-shadow: #000 0 0 5px;
}
